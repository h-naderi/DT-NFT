// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts@4.6.0/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.6.0/access/Ownable.sol";
import "@openzeppelin/contracts@4.6.0/utils/Counters.sol";
import "./Data Collector.sol";

contract dynNFT is ERC721, ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;

    DataCollector dc= DataCollector(0xbB23bDFC95F7E6CfC08c6E12A19D9D0Fc6203c53);
    uint256 actPerformance=dc.getData();

    Counters.Counter private _tokenIdCounter;
    string[] IpfsUri=["https://gateway.pinata.cloud/ipfs/QmXrmG7Pv55a9JPc3sADCmwwzx7Apo2Hg2M8j778gZ26Vz",
    "https://gateway.pinata.cloud/ipfs/QmUnJKYAzzRqo3nGBWWahRucBKZZCE6rbPqvvkXxqTepWY",
    "https://gateway.pinata.cloud/ipfs/QmQYkNqU3bjTUP3dv3BsuCM6qCPDNmtkasQrCGcvD4tm2v"];
    // Metadata information for each stage of the NFT on IPFS.
    

    function setURI(string memory _ipfs) external onlyOwner(){
        IpfsUri.push(_ipfs);
    }

    function getURI() public view returns (string[] memory){
    return IpfsUri;
}


    uint interval;
    uint lastTimeStamp;

    constructor(uint _interval) ERC721("dNFTs", "dNFT") {
        interval=_interval;
        lastTimeStamp=block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = ((block.timestamp - lastTimeStamp) > interval && actPerformance>300);
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            growBEP(0);
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

    function growBEP(uint256 _tokenId) public {
        if (BEPStage(_tokenId) >= 2) {
            return;
        }
        // Get the current stage of the dNFT and add 1
        uint256 newVal = BEPStage(_tokenId) + 1;
        // store the new URI
        string memory newUri = IpfsUri[newVal];
        // Update the URI
        _setTokenURI(_tokenId, newUri);
    }

    // determine the stage of the dNFT growth
    function BEPStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        // Bad Performance
        if (compareStrings(_uri, IpfsUri[0])) {
            return 0;
        }
        // Normal
        if (compareStrings(_uri, IpfsUri[1])) {
            return 1;
        }
        // Good performance
        return 2;
    }

    /*
     ********************
     * HELPER FUNCTIONS *
     ********************
     */
    // helper function to compare strings
    function compareStrings(string memory a, string memory b)
        public
        pure
        returns (bool)
    {
        return (keccak256(abi.encodePacked((a))) ==
            keccak256(abi.encodePacked((b))));
    }

    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId)
        internal
        override(ERC721, ERC721URIStorage)
    {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}